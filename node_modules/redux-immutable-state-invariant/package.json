{
  "_args": [
    [
      {
        "raw": "redux-immutable-state-invariant@1.2.3",
        "scope": null,
        "escapedName": "redux-immutable-state-invariant",
        "name": "redux-immutable-state-invariant",
        "rawSpec": "1.2.3",
        "spec": "1.2.3",
        "type": "version"
      },
      "/Users/omkar/workspace/EducationOne"
    ]
  ],
  "_from": "redux-immutable-state-invariant@1.2.3",
  "_id": "redux-immutable-state-invariant@1.2.3",
  "_inCache": true,
  "_location": "/redux-immutable-state-invariant",
  "_nodeVersion": "4.2.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/redux-immutable-state-invariant-1.2.3.tgz_1460927201122_0.39681256166659296"
  },
  "_npmUser": {
    "name": "leoasis",
    "email": "leoasis@gmail.com"
  },
  "_npmVersion": "3.7.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redux-immutable-state-invariant@1.2.3",
    "scope": null,
    "escapedName": "redux-immutable-state-invariant",
    "name": "redux-immutable-state-invariant",
    "rawSpec": "1.2.3",
    "spec": "1.2.3",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/redux-immutable-state-invariant/-/redux-immutable-state-invariant-1.2.3.tgz",
  "_shasum": "d8df01c2f38ab5df1f434cd2613b5e8c4e9f9d83",
  "_shrinkwrap": null,
  "_spec": "redux-immutable-state-invariant@1.2.3",
  "_where": "/Users/omkar/workspace/EducationOne",
  "author": {
    "name": "Leonardo Andres Garcia Crespo",
    "email": "leoasis@gmail.com"
  },
  "dependencies": {
    "invariant": "^2.1.0",
    "json-stringify-safe": "^5.0.1"
  },
  "description": "Redux middleware that detects mutations between and outside redux dispatches. For development use only.",
  "devDependencies": {
    "babel": "^5.8.3",
    "expect": "^1.8.0",
    "mocha": "^2.2.5"
  },
  "directories": {},
  "dist": {
    "shasum": "d8df01c2f38ab5df1f434cd2613b5e8c4e9f9d83",
    "tarball": "https://registry.npmjs.org/redux-immutable-state-invariant/-/redux-immutable-state-invariant-1.2.3.tgz"
  },
  "gitHead": "aa03bff51ff4f8b46b23511b828ae050e1078135",
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "leoasis",
      "email": "leoasis@gmail.com"
    }
  ],
  "name": "redux-immutable-state-invariant",
  "optionalDependencies": {},
  "readme": "# redux-immutable-state-invariant\n\n[![Build Status](https://travis-ci.org/leoasis/redux-immutable-state-invariant.png)](https://travis-ci.org/leoasis/redux-immutable-state-invariant)\n\nRedux middleware that spits an error on you when you try to mutate your state either inside a dispatch or between dispatches. **For development use only!**\n\n## Why?\n\nBecause [you're not allowed to mutate your state in your reducers](http://redux.js.org/docs/Troubleshooting.html#never-mutate-reducer-arguments)!. And by extension, you shouldn't mutate them either outside. In order to change state in your app, you should always return a new instance of your state with the changes.\n\nIf you're using a library such as `Immutable.js`, this is automatically done for you since the structures provided by that library don't allow you to mutate them (as long as you don't have mutable stuff as values in those collections). However, if you're using regular objects and arrays, you should be careful to avoid mutations.\n\n## How to install\n\nThis lib is intended to use only during development. **Don't use this in production!**\n\n```js\nnpm install --save-dev redux-immutable-state-invariant\n```\n\n## How to use\n\nAs said above, **don't use this in production!** It involves a lot of object copying and will degrade your app's performance. This is intended to be a tool to aid you in development and help you catch bugs.\n\nTo use it, just add it as a middleware in your redux store:\n\n```js\nconst {applyMiddleware, combineReducers, createStore} = require('redux');\nconst thunk = require('redux-thunk');\nconst reducer = require('./reducers/index');\n\n// Be sure to ONLY add this middleware in development!\nconst middleware = process.env.NODE_ENV !== 'production' ?\n  [require('redux-immutable-state-invariant')(), thunk] :\n  [thunk];\n\n// Note passing middleware as the last argument to createStore requires redux@>=3.1.0\nconst store = createStore(\n  reducer,\n  applyMiddleware(...middleware)\n);\n```\n\nThen if you're doing things correctly, you should see nothing different. But if you don't, that is, if you're mutating your data somewhere in your app either in a dispatch or between dispatches, an error will be thrown with a (hopefully) descriptive message.\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "babel --out-dir dist src",
    "clean": "rm -rf dist",
    "example": "cd example && rm -rf node_modules/redux-immutable-state-invariant && npm install && npm start",
    "prepublish": "npm run clean && npm run build",
    "test": "mocha --compilers js:babel/register"
  },
  "version": "1.2.3"
}
